"""
Django settings for bil_site project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import configparser
import sys

site_cfg_misconfigured = (
    "The site.cfg file exists but is not properly "
    "configured. See example.cfg as a reference.")

config = configparser.ConfigParser()
if not os.path.isfile('site.cfg'):
    print('The site.cfg file is missing. Please generate one and put it'
          ' relative to where the Python process is starting. See example.cfg'
          ' as a reference.')
    sys.exit(1)
config.read('site.cfg')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# LOGIN_REDIRECT_URL= '../index'
LOGIN_REDIRECT_URL = '/'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# See example.cfg for reference. You can generate a new secret key like this:
# python manage.py shell -c 'from django.core.management import utils; print(utils.get_random_secret_key())'')'
try:
    SECRET_KEY = config['Security']['SECRET_KEY']
except KeyError as e:
    print(site_cfg_misconfigured)
    sys.exit(1)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config['Security'].getboolean('DEBUG')

# This will look like it is creating remote storage areas, but really does
# nothing. It's just for testing purposes.
FAKE_STORAGE_AREA = config['Security'].getboolean('FAKE_STORAGE_AREA')

ALLOWED_HOSTS = ["localhost", "c00.bil.psc.edu"]


# Application definition

INSTALLED_APPS = [
    'ingest.apps.IngestConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_tables2',
    'django_celery_results',
    'django_filters',
    'bootstrap4',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bil_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['./templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bil_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

try:
    DATABASE = config['Security']['DATABASE']
except KeyError as e:
    print(site_cfg_misconfigured)
    sys.exit(1)

if DATABASE == "postgres":
    try:
        DATABASE_PASSWORD = config['Security']['DATABASE_PASSWORD']
    except KeyError as e:
        print(site_cfg_misconfigured)
        sys.exit(1)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'bil_site',
            'USER': 'bil_site_user',
            'PASSWORD': DATABASE_PASSWORD,
            'HOST': 'localhost',
            'PORT': '',
        }
    }
elif DATABASE == "sqlite":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    print("Unknown DATABASE option used in site.cfg. Please set 'DATABASE = "
          "postgres' or 'DATABASE = sqlite'.")
    sys.exit(1)


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_BACKEND = 'django-cache'

try:
    IMG_DATA_HOST = config['Security']['IMG_DATA_HOST']
    IMG_DATA_USER = config['Security']['IMG_DATA_USER']
except KeyError as e:
    print(site_cfg_misconfigured)
    sys.exit(1)
